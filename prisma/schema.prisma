generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  ADMIN
}

enum ProductType {
  FLIGHT
  HOTEL
  EXCURSION
  TRANSPORT
}

enum CartStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(CLIENT)
  carts     Cart[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Base Product model with common fields
model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  type        ProductType
  packages    Package[]   @relation("PackageToProduct")
  cartItems   CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations to specific product types
  flight      Flight?
  hotel       Hotel?
  excursion   Excursion?
  transport   Transport?
}

// Flight specific model
model Flight {
  id          String   @id @default(cuid())
  productId   String   @unique
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Flight specific fields
  from        String
  to          String
  departure   String   // Time
  arrival     String   // Time
  duration    String
  class       String   @default("Econ√≥mica")
  stops       String   @default("Directo")
  airline     String?
  flightNumber String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Hotel specific model
model Hotel {
  id          String   @id @default(cuid())
  productId   String   @unique
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Hotel specific fields
  location    String
  rating      Float?
  reviews     Int      @default(0)
  amenities   String[] // Array of amenities
  checkIn     String?  // Time
  checkOut    String?  // Time
  rooms       Int?
  stars       Int?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Excursion/Experience specific model
model Excursion {
  id          String   @id @default(cuid())
  productId   String   @unique
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Excursion specific fields
  location    String
  category    String   @default("Excursion")
  duration    String?
  maxGroupSize Int?
  difficulty  String?
  includes    String[] // What's included
  requirements String[] // Requirements
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Transport specific model
model Transport {
  id          String   @id @default(cuid())
  productId   String   @unique
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Transport specific fields
  vehicleType String   // Car, Bus, Train, etc.
  capacity    Int?
  pickupLocation String?
  dropoffLocation String?
  duration    String?
  includes    String[] // What's included (fuel, driver, etc.)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Package {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  products    Product[] @relation("PackageToProduct")
  cartItems   CartItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  status    CartStatus @default(PENDING)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
  packageId String?
  package   Package? @relation(fields: [packageId], references: [id])
  quantity  Int      @default(1)
  price     Float    @default(0)// Price at the time of adding to cart
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 